# Global Docker Compose for the entire Tax Calculator Application
# This orchestrates all services: backend microservices, frontend, and supporting services

services:
  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: tax-calculator-frontend
    ports:
      - "3000:80" # Nginx serving the Angular app
    environment:
      - NODE_ENV=production
      - API_BASE_URL=http://localhost:8001
    networks:
      - tax-calculator-network
    depends_on:
      - invoice-service
      - tax-calculation-service

  # Backend Microservices
  invoice-service:
    build:
      context: ./backend
      dockerfile: invoice-service/Dockerfile
    container_name: invoice-service
    ports:
      - "8001:8001"
    environment:
      - RUST_LOG=info
      - DATABASE_URL=postgresql://tax_user:tax_password@postgres:5432/tax_calculator
    networks:
      - tax-calculator-network
    depends_on:
      postgres:
        condition: service_healthy

  tax-calculation-service:
    build:
      context: ./backend
      dockerfile: tax-calculation-service/Dockerfile
    container_name: tax-calculation-service
    ports:
      - "8002:8002"
    environment:
      - RUST_LOG=info
      - INVOICE_SERVICE_URL=http://invoice-service:8001
      - ZK_PROOF_SERVICE_URL=http://zk-proof-service:8004
    networks:
      - tax-calculator-network
    depends_on:
      - invoice-service
      - zk-proof-service

  business-entity-service:
    build:
      context: ./backend
      dockerfile: business-entity-service/Dockerfile
    container_name: business-entity-service
    ports:
      - "8003:8003"
    environment:
      - RUST_LOG=info
    networks:
      - tax-calculator-network

  zk-proof-service:
    build:
      context: ./backend
      dockerfile: zk-proof-service/Dockerfile
    container_name: zk-proof-service
    ports:
      - "8004:8004"
    environment:
      - RUST_LOG=info
    networks:
      - tax-calculator-network

  validation-service:
    build:
      context: ./backend
      dockerfile: validation-service/Dockerfile
    container_name: validation-service
    ports:
      - "8005:8005"
    environment:
      - RUST_LOG=info
      - BUSINESS_ENTITY_SERVICE_URL=http://business-entity-service:8003
    networks:
      - tax-calculator-network
    depends_on:
      - business-entity-service

  # Supporting Services
  postgres:
    image: postgres:15-alpine
    container_name: tax-calculator-db
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=tax_calculator
      - POSTGRES_USER=tax_user
      - POSTGRES_PASSWORD=tax_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - tax-calculator-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U tax_user -d tax_calculator" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # redis:
  #   image: redis:7-alpine
  #   container_name: tax-calculator-redis
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis_data:/data
  #   networks:
  #     - tax-calculator-network
  #   command: redis-server --appendonly yes

  # Reverse Proxy (Optional but recommended)
  nginx:
    image: nginx:alpine
    container_name: tax-calculator-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    networks:
      - tax-calculator-network
    depends_on:
      - frontend
      - invoice-service
      - tax-calculation-service

networks:
  tax-calculator-network:
    driver: bridge

volumes:
  postgres_data:
